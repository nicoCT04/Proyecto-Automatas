#!/usr/bin/env python3
"""
Programa principal para el proyecto de Teor√≠a de la Computaci√≥n
Convierte expresiones regulares a aut√≥matas y los minimiza
"""

from shunting_yard import convertir_a_postfix, mostrar_conversion
from constructor_afn import ConstructorAFN
from constructor_afd import ConstructorAFD
from minimizador_afd import MinimizadorAFD
from simulador_afd import SimuladorAFD
from visualizador import (crear_visualizacion_graphviz, crear_visualizacion_simple, 
                         mostrar_automata_consola, instalar_graphviz_info, guardar_automata_completo, 
                         limpiar_y_crear_carpetas)

def procesar_expresion_regular(expresion):
    """
    Procesa una expresi√≥n regular completa: de regexp a AFD m√≠nimo
    """
    print(f"\n{'='*60}")
    print(f"PROCESANDO EXPRESI√ìN REGULAR: {expresion}")
    print(f"{'='*60}")
    
    # Limpiar y crear carpetas (solo mantiene archivos de la √∫ltima expresi√≥n)
    print("\nüìÅ Preparando carpetas de resultados...")
    limpiar_y_crear_carpetas()
    print("‚úì Carpetas limpias y listas para nuevos resultados")
    
    # Crear nombre base para archivos (sin caracteres especiales)
    nombre_base = expresion.replace('(', '').replace(')', '').replace('|', 'o').replace('*', 'estrella').replace('+', 'mas').replace(' ', '')
    
    # Paso 1: Convertir a notaci√≥n postfix
    print("\n1. CONVERSI√ìN A NOTACI√ìN POSTFIX")
    print("-" * 40)
    postfix = mostrar_conversion(expresion)
    
    # Paso 2: Construir AFN
    print("\n2. CONSTRUCCI√ìN DE AFN (Thompson)")
    print("-" * 40)
    constructor_afn = ConstructorAFN()
    afn = constructor_afn.convertir_postfix_a_afn(postfix)
    mostrar_automata_consola(afn, "AFN Generado")
    
    # Guardar AFN en carpeta espec√≠fica
    guardar_automata_completo(afn, "afn_resultado", "AFN", f"AFN para: {expresion}")
    
    # Paso 3: Convertir AFN a AFD
    print("\n3. CONVERSI√ìN AFN A AFD (Construcci√≥n de Subconjuntos)")
    print("-" * 40)
    constructor_afd = ConstructorAFD()
    afd = constructor_afd.convertir_afn_a_afd(afn)
    mostrar_automata_consola(afd, "AFD Generado")
    
    # Guardar AFD en carpeta espec√≠fica
    guardar_automata_completo(afd, "afd_resultado", "AFD", f"AFD para: {expresion}")
    
    # Paso 4: Minimizar AFD
    print("\n4. MINIMIZACI√ìN DEL AFD (Hopcroft)")
    print("-" * 40)
    minimizador = MinimizadorAFD()
    afd_min = minimizador.minimizar_afd(afd)
    mostrar_automata_consola(afd_min, "AFD Minimizado")
    
    # Guardar AFD minimizado en carpeta espec√≠fica
    guardar_automata_completo(afd_min, "afd_min_resultado", "AFD_MIN", f"AFD M√≠nimo para: {expresion}")
    
    print(f"\n‚úì Resultados guardados para: {expresion}")
    print("‚úì Solo se mantienen los archivos de la √∫ltima expresi√≥n procesada")
    
    return afd_min

def simular_cadenas(afd_min, expresion):
    """
    Permite al usuario probar cadenas en el AFD minimizado
    """
    simulador = SimuladorAFD(afd_min)
    
    print(f"\n{'='*60}")
    print(f"SIMULACI√ìN DE CADENAS PARA: {expresion}")
    print(f"{'='*60}")
    
    # Mostrar informaci√≥n del aut√≥mata
    simulador.mostrar_tabla_transiciones()
    
    while True:
        print(f"\nAlbeto del aut√≥mata: {sorted(afd_min.simbolos)}")
        cadena = input("\nIngresa una cadena para probar (o 'salir' para terminar): ").strip()
        
        if cadena.lower() == 'salir':
            break
        
        if cadena == '':
            # Cadena vac√≠a - usar epsilon
            print("Probando cadena vac√≠a (Œµ)")
            # Para cadena vac√≠a, verificar si el estado inicial es de aceptaci√≥n
            if afd_min.estado_inicial in afd_min.estados_aceptacion:
                print("Cadena vac√≠a ACEPTADA ‚úì")
            else:
                print("Cadena vac√≠a RECHAZADA ‚úó")
        else:
            simulador.simular_cadena(cadena)

def mostrar_menu():
    """
    Muestra el men√∫ principal
    """
    print(f"\n{'='*60}")
    print("PROYECTO TEOR√çA DE LA COMPUTACI√ìN")
    print("Conversi√≥n de Expresiones Regulares a Aut√≥matas")
    print(f"{'='*60}")
    print("Este programa convierte expresiones regulares a AFN, AFD y AFD m√≠nimo")
    print("Operadores soportados: | (uni√≥n), * (estrella), + (positiva), () (agrupaci√≥n)")
    print("S√≠mbolos: letras, n√∫meros, Œµ (√©psilon)")
    print()

def main():
    """
    Funci√≥n principal del programa
    """
    mostrar_menu()
    instalar_graphviz_info()
    
    while True:
        print(f"\n{'-'*40}")
        expresion = input("Ingresa una expresi√≥n regular (o 'salir' para terminar): ").strip()
        
        if expresion.lower() == 'salir':
            print("¬°Gracias por usar el programa!")
            break
        
        if not expresion:
            print("Por favor ingresa una expresi√≥n v√°lida")
            continue
        
        try:
            # Procesar expresi√≥n regular
            afd_min = procesar_expresion_regular(expresion)
            
            # Preguntar si quiere simular cadenas
            while True:
                respuesta = input("\n¬øQuieres probar cadenas en este aut√≥mata? (s/n): ").strip().lower()
                if respuesta in ['s', 'si', 's√≠', 'y', 'yes']:
                    simular_cadenas(afd_min, expresion)
                    break
                elif respuesta in ['n', 'no']:
                    break
                else:
                    print("Por favor responde 's' o 'n'")
                    
        except Exception as e:
            print(f"Error al procesar la expresi√≥n: {e}")
            print("Verifica que la expresi√≥n est√© bien formada")

if __name__ == "__main__":
    main()
